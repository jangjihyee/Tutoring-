fun merge(list: IntArray, left : Int, mid : Int, right : Int, sorted : IntArray) {
    var i = left
    var j = mid + 1
    var k = left
    // 분할 정렬된 list 의 합병
    while (i <= mid && j <= right) {
        if (list[i] <= list[j])
            sorted[k++] = list[i++]
        else
            sorted[k++] = list[j++]
    }
    // 남아 있는 값들을 복사
    if (i > mid) {
        for (l in j..right)
            sorted[k++] = list[l]
    }
    else {
        for (l in i..mid)
            sorted[k++] = list[l]
    }
    // sorted 의 리스트를 list[]로 복사한다.
    for (l in left..right) {
        list[l] = sorted[l]
    }
}
// 합병 정렬
fun mergeSort(list: IntArray, left : Int, right : Int, sorted : IntArray) {
    if (left < right) {
        val mid = (left + right) / 2 // 중간 위치 계산해서 리스트를 분할한다.
        mergeSort(list, left, mid, sorted) // 앞쪽 리스트 부분을 정렬한다.
        mergeSort(list, mid + 1, right, sorted) // 뒤쪽 리스트 부분을 정렬한다.
        merge(list, left, mid, right, sorted) // 앞쪽 리스트와 뒤쪽 리스트를
        병합한다.
    }
}
fun main() {
    val list = intArrayOf(30, 8, 4, 1, 10, 7, 22, 9, 5)
    val cnt = 9
    // 정렬 결과를 출력한다.
    mergeSort(list, 0, cnt - 1, IntArray(cnt))
    for (i in 0 until cnt) {
        println(list[i])
    }
}
